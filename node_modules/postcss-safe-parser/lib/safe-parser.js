'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _postcssLibParser = require('postcss/lib/parser');

var _postcssLibParser2 = _interopRequireDefault(_postcssLibParser);

var _safeTokenize = require('./safe-tokenize');

var _safeTokenize2 = _interopRequireDefault(_safeTokenize);

var SafeParser = (function (_Parser) {
    _inherits(SafeParser, _Parser);

    function SafeParser() {
        _classCallCheck(this, SafeParser);

        _Parser.apply(this, arguments);
    }

    SafeParser.prototype.tokenize = function tokenize() {
        this.tokens = _safeTokenize2['default'](this.input);
    };

    SafeParser.prototype.unknownDecl = function unknownDecl(node, token) {
        node.source.start = { line: token[2], column: token[3] };
        node.raws.before += node.prop + node.raws.between;
        node.raws.between = '';
        node.prop = token[1];
    };

    SafeParser.prototype.unclosedBracket = function unclosedBracket() {};

    SafeParser.prototype.unknownWord = function unknownWord(start) {
        var buffer = this.tokens.slice(start, this.pos + 1);
        this.spaces += buffer.map(function (i) {
            return i[1];
        }).join('');
    };

    SafeParser.prototype.unexpectedClose = function unexpectedClose() {
        this.current.raws.after += '}';
    };

    SafeParser.prototype.unclosedBlock = function unclosedBlock() {};

    SafeParser.prototype.doubleColon = function doubleColon() {};

    SafeParser.prototype.unnamedAtrule = function unnamedAtrule(node) {
        node.name = '';
    };

    SafeParser.prototype.precheckMissedSemicolon = function precheckMissedSemicolon(tokens) {
        var colon = this.colon(tokens);
        if (colon === false) return;

        var split = undefined;
        for (split = colon - 1; split >= 0; split--) {
            if (tokens[split][0] === 'word') break;
        }
        for (split -= 1; split >= 0; split--) {
            if (tokens[split][0] !== 'space') {
                split += 1;
                break;
            }
        }
        var other = tokens.splice(split, tokens.length - split);
        this.decl(other);
    };

    SafeParser.prototype.checkMissedSemicolon = function checkMissedSemicolon() {};

    return SafeParser;
})(_postcssLibParser2['default']);

exports['default'] = SafeParser;
module.exports = exports['default'];