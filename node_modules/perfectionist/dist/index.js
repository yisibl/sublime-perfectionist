'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _deeplyNested = require('./deeplyNested');

var _deeplyNested2 = _interopRequireDefault(_deeplyNested);

var _getIndent = require('./getIndent');

var _getIndent2 = _interopRequireDefault(_getIndent);

var _longest = require('./longest');

var _longest2 = _interopRequireDefault(_longest);

var _maxSelectorLength = require('./maxSelectorLength');

var _prefixedDecls = require('./prefixedDecls');

var _prefixedDecls2 = _interopRequireDefault(_prefixedDecls);

var _space = require('./space');

var _space2 = _interopRequireDefault(_space);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _commentRegex = require('comment-regex');

var _sameLine = require('./sameLine');

var _sameLine2 = _interopRequireDefault(_sameLine);

var unprefix = _postcss2['default'].vendor.unprefixed;

function applyCompressed(css) {
    css.eachInside(function (rule) {
        rule.semicolon = false;
        if (rule.type === 'rule' || rule.type === 'atrule') {
            rule.between = rule.after = '';
        }
        if (rule.type === 'decl' && !(0, _commentRegex.block)().test(rule.between)) {
            rule.between = ':';
        }
    });
    // Remove final newline
    css.after = '';
}

function applyCompact(css, opts) {
    css.eachInside(function (rule) {
        opts.indentSize = 1;
        if (rule.type === 'comment') {
            var prev = rule.prev();
            if (prev && prev.type === 'decl') {
                rule.before = ' ' + rule.before;
            }
            if (rule.parent && rule.parent.type === 'root') {
                var next = rule.next();
                if (next) {
                    next.before = '\n';
                }
                if (rule !== css.first) {
                    rule.before = '\n';
                }
            }
            return;
        }
        var indent = (0, _getIndent2['default'])(rule, opts.indentSize);
        var deep = (0, _deeplyNested2['default'])(rule);
        if (rule.type === 'rule' || rule.type === 'atrule') {
            rule.between = rule.after = ' ';
            rule.before = indent + rule.before;
            rule.semicolon = true;
        }
        if (rule._selector && rule._selector.raw) {
            rule.selector = rule._selector.raw;
        }
        (0, _maxSelectorLength.maxSelectorLength)(rule, opts);
        if (rule.type === 'decl') {
            if ((0, _deeplyNested2['default'])(rule.parent)) {
                rule.before = '\n' + indent + rule.before;
            } else {
                rule.before = ' ' + rule.before;
            }
            if (!(0, _commentRegex.block)().test(rule.between)) {
                rule.between = ': ';
            }
        }
        if ((deep || rule.nodes) && rule !== css.first) {
            rule.before = '\n ';
        }
        if (deep) {
            rule.after = '\n' + indent;
        }
        if (rule.parent && rule !== rule.parent.first && (rule.type === 'rule' || rule.type === 'atrule')) {
            rule.before = '\n' + indent;
        }
    });
    css.after = '\n';
}

function applyExpanded(css, opts) {
    css.eachInside(function (rule) {
        var indent = (0, _getIndent2['default'])(rule, opts.indentSize);
        if (rule.type === 'comment') {
            var prev = rule.prev();
            if (prev && prev.type === 'decl') {
                if ((0, _sameLine2['default'])(prev, rule)) {
                    rule.before = ' ' + rule.before;
                } else {
                    rule.before = '\n' + indent + rule.before;
                }
            }
            if (rule.parent && rule.parent.type === 'root') {
                var next = rule.next();
                if (next) {
                    next.before = '\n\n';
                }
                if (rule !== css.first) {
                    rule.before = '\n\n';
                }
            }
            return;
        }
        rule.before = indent + rule.before;
        if (rule.type === 'rule' || rule.type === 'atrule') {
            rule.between = ' ';
            rule.semicolon = true;
            if (rule.nodes) {
                rule.after = '\n';
            }
        }
        // visual cascade of vendor prefixed properties
        if (opts.cascade && rule.type === 'rule' && rule.nodes.length > 1) {
            (function () {
                var props = [];
                var prefixed = (0, _prefixedDecls2['default'])(rule).sort(_longest2['default']).filter(function (_ref) {
                    var prop = _ref.prop;

                    var base = unprefix(prop);
                    if (! ~props.indexOf(base)) {
                        return props.push(base);
                    }
                    return false;
                });
                prefixed.forEach(function (prefix) {
                    var base = unprefix(prefix.prop);
                    var vendor = prefix.prop.replace(base, '').length;
                    rule.nodes.filter(function (_ref2) {
                        var prop = _ref2.prop;
                        return prop && ~prop.indexOf(base);
                    }).forEach(function (decl) {
                        var thisVendor = decl.prop.replace(base, '').length;
                        var extraSpace = vendor - thisVendor;
                        if (extraSpace > 0) {
                            decl.before = (0, _space2['default'])(extraSpace) + decl.before;
                        }
                    });
                });
            })();
        }
        if (rule._selector && rule._selector.raw) {
            rule.selector = rule._selector.raw;
        }
        (0, _maxSelectorLength.maxSelectorLength)(rule, opts);
        if (rule.type === 'atrule') {
            if (rule.params) {
                rule.afterName = ' ';
            }
            (0, _maxSelectorLength.maxAtRuleLength)(rule, opts);
        }
        if (rule.type === 'decl') {
            if (!(0, _commentRegex.block)().test(rule.between)) {
                rule.between = ': ';
            }
            (0, _maxSelectorLength.maxValueLength)(rule, opts);
        }
        if (rule.parent && rule.parent.type !== 'root') {
            rule.before = '\n' + rule.before;
            rule.after = '\n' + indent;
        }
        if (rule.parent && rule !== rule.parent.first && (rule.type === 'rule' || rule.type === 'atrule')) {
            rule.before = '\n\n' + indent;
        }
    });
    css.after = '\n';
}

var perfectionist = _postcss2['default'].plugin('perfectionist', function (opts) {
    opts = (0, _objectAssign2['default'])({
        format: 'expanded',
        indentSize: 4,
        maxAtRuleLength: 80,
        maxSelectorLength: 80,
        maxValueLength: 80,
        cascade: true
    }, opts);
    return function (css) {
        css.eachInside(function (node) {
            if (node.before) {
                node.before = node.before.replace(/[;\s]/g, '');
            }
        });
        switch (opts.format) {
            case 'compact':
                applyCompact(css, opts);
                break;
            case 'compressed':
                applyCompressed(css);
                break;
            case 'expanded':
                applyExpanded(css, opts);
                break;
        }
    };
});

perfectionist.process = function (css) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    opts.map = opts.map || (opts.sourcemap ? true : null);
    var processor = (0, _postcss2['default'])([perfectionist(opts)]);
    return processor.process(css, opts);
};

exports['default'] = perfectionist;
module.exports = exports['default'];