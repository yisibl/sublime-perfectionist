'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.maxAtRuleLength = maxAtRuleLength;
exports.maxSelectorLength = maxSelectorLength;
exports.maxValueLength = maxValueLength;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _space = require('./space');

var _space2 = _interopRequireDefault(_space);

var _getIndent = require('./getIndent');

var _getIndent2 = _interopRequireDefault(_getIndent);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function splitProperty(rule, prop, opts) {
    opts = (0, _objectAssign2['default'])({
        reindent: false
    }, opts);
    var max = opts.max;
    var property = rule[prop];
    if (!max || !property) {
        return;
    }
    var exploded = _postcss.list.comma(property);
    if (property.length > max || opts.reduce) {
        (function () {
            var indent = 0;
            if (typeof opts.reindent === 'function') {
                indent = opts.reindent(rule);
            }
            rule[prop] = exploded.reduce(function (lines, chunk) {
                if (opts.breakEvery) {
                    lines.push(chunk);
                    return lines;
                }
                if (lines[lines.length - 1].length + indent <= max) {
                    var merged = lines[lines.length - 1] + ', ' + chunk;
                    if (indent + merged.length <= max) {
                        lines[lines.length - 1] = merged;
                        return lines;
                    }
                }
                lines.push(chunk);
                return lines;
            }, [exploded.shift()]).join(',\n' + (0, _space2['default'])(indent));
        })();
    }
}

function maxAtRuleLength(rule, _ref) {
    var max = _ref.maxAtRuleLength;

    return splitProperty(rule, 'params', {
        max: max,
        breakEvery: true,
        reindent: function reindent(rule) {
            return rule.name.length + 2;
        }
    });
}

function maxSelectorLength(rule, opts) {
    return splitProperty(rule, 'selector', {
        max: opts.maxSelectorLength,
        reduce: true, // where possible reduce to one line
        reindent: function reindent(rule) {
            return (0, _getIndent2['default'])(rule, opts.indentSize).length;
        }
    });
}

function maxValueLength(rule, _ref2) {
    var max = _ref2.maxValueLength;

    if (rule._value && rule._value.raw) {
        rule.value = rule._value.raw;
    }
    return splitProperty(rule, 'value', {
        max: max,
        breakEvery: true,
        reindent: function reindent(rule) {
            return (0, _getIndent2['default'])(rule).length + rule.prop.length + 2;
        }
    });
}